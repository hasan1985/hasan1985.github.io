product_search 

/// sol 1
/**
 * @param {string[]} products
 * @param {string} searchWord
 * @return {string[][]}
 */
const suggestedProducts = (products, searchWord) => {
    products.sort();
    
    let target = "";
    let i = 0;
    const result = [];
    
    for (let ch of searchWord) {
        const local = [];
        
        target += ch;
        
        while (target > products[i] && i < products.length)
            i++;
        
        while (local.length < 3) {
            if (i + local.length >= products.length || !products[i + local.length].startsWith(target))
                break;
            local.push(products[i + local.length]);
        }
        result.push(local);
    }
    
    return result;
};
///


///
/**
 * @param {string[]} products
 * @param {string} searchWord
 * @return {string[][]}
 */
var suggestedProductsTrie = function(products, searchWord) {
    
    products.sort();
    
    let trie = {};
    for (let p of products) {
        let root = trie;
        for (let i=0;i<p.length;i++) {
            if (!root[p[i]]) root[p[i]] = {'sug':[]};
            if (root[p[i]]['sug'].length < 3) root[p[i]]['sug'].push(p);    
            root = root[p[i]];
        }
    }
    
    let root = trie, res = [];
    for (let i=0;i<searchWord.length;i++) {
        if (root) root = root[searchWord[i]];
        res.push(!root?[]:root['sug']);
    }
    
    return res;
};


var suggestedProducts = function(products, searchWord) {
    products.sort();
    let word = '';
    let res = [];
    for (let i=0;i<searchWord.length;i++) {
        products = products.filter((p)=>p[i]==searchWord[i]);
        res.push(products.slice(0, 3));
    }
    return res;
}
////