/**
Write an async task runner where the inputs are async tasks and their dependencies. This runner should run all the input tasks to completion in the appropriate order.

A -- |
     | -- C -- D
B -- |

const taskA = {
    id: 'A',
    job: () => {
        setTimeout(() => {
            console.log('\n ran task A');
        }, 100);
    }, 
    depedencies: [],
}

endpoint: 
getAllUserIds
getUserById

asyncTaskRunner(input) 

**/

const taskA = {
    id: 'A',
    job: () => {
        return new Promise((res) => {
          setTimeout(() => {
              console.log('\n ran task A');
              res();
          }, 100);
        });
    }, 
    depedencies: [],
}

taskA.depedencies.push({
    id: 'A-B1',
    job: () => {
        return new Promise((res) => {
          setTimeout(() => {
              console.log('\n ran task A-B1');
              res();
          }, 100);
        });
    }, 
    depedencies: [],
})

taskA.depedencies.push({
    id: 'A-B2',
    job: () => {
        return new Promise((res) => {
          setTimeout(() => {
              console.log('\n ran task A-B2');
              res();
          }, 100);
        });
    }, 
    depedencies: [],
})

let taskAB2 = taskA.depedencies[1];

taskAB2.depedencies.push({
    id: 'A-B2-C',
    job: () => {
        return new Promise((res) => {
          setTimeout(() => {
              console.log('\n ran task A-B2-C');
              res();
          }, 100);
        });
    }, 
    depedencies: [],
})

let taskAB2C = taskAB2.depedencies[0];
taskAB2C.depedencies.push({
    id: 'A-B2-C-D',
    job: () => {
        return new Promise((res) => {
          setTimeout(() => {
              console.log('\n ran task A-B2-C-D');
              res();
          }, 100);
        });
    }, 
    depedencies: [],
});

asyncRunner(taskA);

function asyncRunner(task) {
  console.log(task.id);
  if (task.depedencies.length === 0) {
    return task.job();
  } else {
    let promises = [];
    for (let childTask of task.depedencies){
      promises.push(asyncRunner(childTask));
    } 
    return new Promise((res) => {
      Promise.all(promises).then(() => {
          task.job().then(() => {
            res();
          });
      });
    });
  }
}

const _ = require('lodash');

